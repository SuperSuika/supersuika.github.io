<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://supersuika.github.io</id>
    <title>大西瓜的高端博客</title>
    <updated>2020-10-24T12:17:59.759Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://supersuika.github.io"/>
    <link rel="self" href="https://supersuika.github.io/atom.xml"/>
    <subtitle>温故而知新，往来无白丁。</subtitle>
    <logo>https://supersuika.github.io/images/avatar.png</logo>
    <icon>https://supersuika.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 大西瓜的高端博客</rights>
    <entry>
        <title type="html"><![CDATA[Test02]]></title>
        <id>https://supersuika.github.io/post/test02/</id>
        <link href="https://supersuika.github.io/post/test02/">
        </link>
        <updated>2020-10-15T08:21:22.000Z</updated>
        <content type="html"><![CDATA[<p>002</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django项目实现支付宝支付(1/2)]]></title>
        <id>https://supersuika.github.io/post/to_pay/</id>
        <link href="https://supersuika.github.io/post/to_pay/">
        </link>
        <updated>2020-10-15T08:21:04.000Z</updated>
        <summary type="html"><![CDATA[<p>一、通过openssl生成私钥和公钥。<br>
Terminal下先切换路径。</p>
]]></summary>
        <content type="html"><![CDATA[<p>一、通过openssl生成私钥和公钥。<br>
Terminal下先切换路径。</p>
<!-- more -->
<pre><code>cd ~
cd Desktop
touch keys
cd keys 
打开openssl。
</code></pre>
<!-- more -->
<pre><code>genrsa -out app_private_key.pem   2048  # 私钥
rsa -in app_private_key.pem -pubout -out app_public_key.pem # 导出公钥，用于之后在Alipay生成应用公钥
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://supersuika.github.io/post-images/1603537462218.png" alt="" loading="lazy"></figure>
<p>二、在支付宝开放平台生成支付宝公钥。<br>
支付宝开放平台网址  https://open.alipay.com/platform/home.htm<br>
<img src="https://supersuika.github.io/post-images/1603538119249.png" alt="" loading="lazy"><br>
<img src="https://supersuika.github.io/post-images/1603538134285.png" alt="" loading="lazy"></p>
<p>三、拿到三个key文件，然后导入到项目中。<br>
<img src="https://supersuika.github.io/post-images/1603538582004.png" alt="" loading="lazy"><br>
将项目中的文件准备好。<br>
<img src="https://supersuika.github.io/post-images/1603541013369.png" alt="" loading="lazy"></p>
<p>附件：alipay.py</p>
<!-- more -->
<pre><code>from datetime import datetime
from urllib.parse import quote_plus
# SHA256WithRSA (公钥，私钥)
# md5
from Crypto.PublicKey import RSA
from Crypto.Signature import PKCS1_v1_5
from Crypto.Hash import SHA256
import base64
import json


class AliPay(object):
    &quot;&quot;&quot;
    创建支付对象，里面是常用的请求参数
    &quot;&quot;&quot;
    def __init__(self, appid, app_notify_url, app_private_key_path,
                alipay_public_key_path, return_url, debug=False):
        self.appid = appid
        self.app_notify_url = app_notify_url  #  异步通知
        self.return_url = return_url # 同步通知
        self.app_private_key_path = app_private_key_path

        # 加签
        with open(self.app_private_key_path) as fp:
            self.app_private_key = RSA.importKey(fp.read())
    # 验签
        self.alipay_public_key_path = alipay_public_key_path
        with open(self.alipay_public_key_path) as fp:
            self.alipay_public_key = RSA.importKey(fp.read())


        if debug is True:
            # 沙箱网关
            self.gateway = &quot;https://openapi.alipaydev.com/gateway.do&quot;
        else:
            # 正式网关
            self.gateway = &quot;https://openapi.alipay.com/gateway.do&quot;

    def direct_pay(self, subject, out_trade_no, total_amount, return_url=None, **kwargs):

        # 支付
        # 业务参数
        biz_content = {
            &quot;subject&quot;: subject, # 标题
            &quot;out_trade_no&quot;: out_trade_no, # uuid的订单号，只要不重复就可以，appid下不能有重复的
            &quot;total_amount&quot;: total_amount, # 支付的金额
            &quot;product_code&quot;: &quot;FAST_INSTANT_TRADE_PAY&quot;, # 交易方式：即时到账

        }
    # 可以传入额外的参数，都更新到这个里面了
        biz_content.update(kwargs)
        data = self.build_body(&quot;alipay.trade.page.pay&quot;, biz_content, self.return_url)
        return self.sign_data(data)

    def direct_query(self,out_trade_no,trade_no):
        biz_content = {
            &quot;out_trade_no&quot;: out_trade_no,
            &quot;trade_no&quot;: trade_no,
        }
        data = self.build_body(&quot;alipay.trade.query&quot;, biz_content)


        return  self.sign_data(data)

    def build_body(self, method, biz_content, return_url=None):
        data = {
            &quot;app_id&quot;: self.appid,
            &quot;method&quot;: method,
            &quot;charset&quot;: &quot;utf-8&quot;,
            &quot;sign_type&quot;: &quot;RSA2&quot;,
            &quot;timestamp&quot;: datetime.now().strftime(&quot;%Y-%m-%d %H:%M:%S&quot;),
            &quot;version&quot;: &quot;1.0&quot;,
            &quot;biz_content&quot;: biz_content
        }

        if return_url is not None:
            data[&quot;notify_url&quot;] = self.app_notify_url
            data[&quot;return_url&quot;] = self.return_url

        return data

    def sign_data(self, data):
        data.pop(&quot;sign&quot;,None) # 删除sign
        # 排序后的字符串
        unsigned_items = self.ordered_data(data)  # 排序，如何对字典排序
        # app_id=sad&amp;
        # 待签名字符串
        unsigned_string = &quot;&amp;&quot;.join(&quot;{0}={1}&quot;.format(k, v) for k, v in unsigned_items)
        # 签名
        sign = self.sign(unsigned_string.encode(&quot;utf-8&quot;))
        # 添加上‘’
        quoted_string = &quot;&amp;&quot;.join(&quot;{0}={1}&quot;.format(k, quote_plus(v)) for k, v in unsigned_items)

        # 获得最终的订单信息字符串
        signed_string = quoted_string + &quot;&amp;sign=&quot; + quote_plus(sign)
        return signed_string

    def ordered_data(self, data):
        complex_keys = []
        for key, value in data.items():
            if isinstance(value, dict):
                complex_keys.append(key)

        # 将字典类型的数据dump出来 针对biz-content
        for key in complex_keys:
            data[key] = json.dumps(data[key], separators=(',', ':'))

        return sorted([(k, v) for k, v in data.items()])

    def sign(self, unsigned_string):
        # 开始计算签名
        key = self.app_private_key
        signer = PKCS1_v1_5.new(key)
        signature = signer.sign(SHA256.new(unsigned_string))
        # base64 编码
        sign = base64.encodestring(signature).decode(&quot;utf8&quot;).replace(&quot;\n&quot;, &quot;&quot;)
        return sign

    def _verify(self, raw_content, signature):
        # 开始计算签名
        key = self.alipay_public_key
        signer = PKCS1_v1_5.new(key)
        digest = SHA256.new()
        digest.update(raw_content.encode(&quot;utf8&quot;))
        if signer.verify(digest, base64.decodestring(signature.encode(&quot;utf8&quot;))):
            return True
        return False

    def verify(self, data, signature):
        if &quot;sign_type&quot; in data:
            sign_type = data.pop(&quot;sign_type&quot;)
        # 排序后的字符串
        unsigned_items = self.ordered_data(data)
        message = &quot;&amp;&quot;.join(u&quot;{}={}&quot;.format(k, v) for k, v in unsigned_items)

        return self._verify(message, signature)


if __name__ == '__main__':
    ali = AliPay(app_notify_url='http://127.0.0.1',return_url='http://127.0.0.1',appid='2016073100136733',app_private_key_path='app_private_key',alipay_public_key_path='app_public_key')
    print  ('https://openapi.alipaydev.com/gateway.do?'+ali.direct_pay(subject='asdsad',total_amount='0.01',out_trade_no='1000000000000000'))
    return_data = input('请输入返回的参数\r\n').strip()
    d = dict([(item.split('=')) for item in return_data.split('&amp;')])
    sign = d.pop('sign')
    print (ali.verify(d,sign))
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MAC终端调整指针最大移动速度]]></title>
        <id>https://supersuika.github.io/post/macmousemove/</id>
        <link href="https://supersuika.github.io/post/macmousemove/">
        </link>
        <updated>2019-01-15T09:02:57.000Z</updated>
        <summary type="html"><![CDATA[<p>一、通过终端来设置指针移动的最大速度：</p>
]]></summary>
        <content type="html"><![CDATA[<p>一、通过终端来设置指针移动的最大速度：</p>
<!-- more -->
<pre><code>1、查看当前速度：   

    defaults read -g com.apple.mouse.scaling

2、修改指令：      

    defaults write -g com.apple.mouse.scaling  10.5 (建议数值7-10)

3、重启
</code></pre>
<hr>
<hr>
<p>备注：<br>
二、其他相关调整：</p>
<!-- more -->
<pre><code>1、滚轮速度：

    defaults write -g com.apple.scrollwheel.scaling 1.2

2、鼠标加速度（双击阈值）：
   
    defaults write -g com.apple.mouse.doubleClickThreshold 0.75 
    
3、移动速度初始值：

    defaults write -g com.apple.mouse.scaling 5  

    自己根据需要调低调高，系统重启后生效。
    如果设置出现异常，可以使用以上三个参数值，并根据自己的需要适当调整。
</code></pre>
]]></content>
    </entry>
</feed>